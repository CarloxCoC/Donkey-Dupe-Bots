[{"C:\\Users\\Carlox\\Desktop\\Code\\donkey-dupe-react\\app\\layout.js":"1","C:\\Users\\Carlox\\Desktop\\Code\\donkey-dupe-react\\app\\page.js":"2"},{"size":373,"mtime":1691022414440,"results":"3","hashOfConfig":"4"},{"size":5898,"mtime":1691193228254,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rv5doy",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"C:\\Users\\Carlox\\Desktop\\Code\\donkey-dupe-react\\app\\layout.js",[],[],"C:\\Users\\Carlox\\Desktop\\Code\\donkey-dupe-react\\app\\page.js",["13","14","15","16"],[],"\"use client\"\n\nimport { useEffect, useState } from \"react\";\n\nexport default function Home() {\n\n  const [coords, setCoords] = useState([0, 0, 0])\n  const [bots, setBots] = useState([])\n  const [showPass, setShow] = useState(false)\n  const [hideCoords, setHide] = useState(false)\n  const [recentBots, setRecent] = useState([])\n\n  useEffect(() => {\n    setInterval(() => {\n      fetch(\"http://localhost:1492/bots\").then(data => data.json()).then(data => {\n        setBots(data)\n      })\n    }, 2000);\n\n    setCoords([localStorage.getItem(\"dropx\") ?? 0, localStorage.getItem(\"dropy\") ?? 0, localStorage.getItem(\"dropz\") ?? 0])\n    if (localStorage.getItem(\"recentBots\")) {\n      setRecent(JSON.parse(localStorage.getItem(\"recentBots\")))\n    } else {\n      setRecent([])\n    }\n  }, [])\n\n  function inputHandler(ev) {\n    if (ev.target.value == \"\") ev.target.value = 0\n    localStorage.setItem(ev.target.id, ev.target.value)\n    setCoords([document.getElementById(\"dropx\").value, document.getElementById(\"dropy\").value, document.getElementById(\"dropz\").value])\n  }\n\n  function postTask(body) {\n    fetch(\"http://localhost:1492/task\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body)\n    }).catch(err => console.log(err))\n  }\n\n  function startBot() {\n    const username = document.getElementById(\"bot1user\").value\n    const password = document.getElementById(\"bot1pass\").value\n\n    if (username == \"\" || password == \"\") {\n      alert(\"Username and password required\")\n      return\n    }\n\n    const newRecent = [{ username: username, password: password }, ...recentBots.filter(b => b.username != username)]\n    localStorage.setItem(\"recentBots\", JSON.stringify(newRecent))\n    setRecent(newRecent)\n    postTask({ task: \"start\", username: username, password: password })\n  }\n\n  function setLogin(username, password) {\n    document.getElementById(\"bot1user\").value = username\n    document.getElementById(\"bot1pass\").value = password\n  }\n\n  return (\n    <>\n      <header className=\"text-white px-2 flex gap-20 py-2\"><strong><span className=\"text-orange-400\">DONKEY DUPE BOTS</span> by <a className=\"underline\" target=\"_blank\" href=\"https://github.com/CarloxCoC\">carlox</a></strong>\n      <div className=\"flex gap-2 items-center\">\n        <h2>All projects:</h2>\n        <a target=\"_blank\" className=\"projects\" href=\"https://www.youtube.com/watch?v=F6Xiq0VxIUU\">Delivery Bot</a>\n        <a target=\"_blank\" className=\"projects\" href=\"https://www.youtube.com/watch?v=sxPUp7Ye3tI\">MapArt</a>\n        <a target=\"_blank\" className=\"projects\" href=\"https://map.carlox.es\">Real-time updating map</a>\n        <a target=\"_blank\" className=\"projects\" href=\"https://6b6t.vercel.app/\">Interactive Map</a>\n        <a target=\"_blank\" className=\"projects\" href=\"https://www.youtube.com/watch?v=uXhc0YpfUCA\">13M obsidian logo</a>\n        <a target=\"_blank\" className=\"projects\" href=\"https://www.youtube.com/watch?v=fIIR2w81xJA\">5m Obsidian logo</a>\n        <a target=\"_blank\" className=\"discord\" href=\"https://discord.com/w6Yu6DF\">Discord</a>\n      </div>\n      \n      </header>\n      <main className=\"flex flex-row p-12 gap-4\">\n        <div className=\"actions\">\n          <h1><strong>Actions</strong></h1>\n          <div className='flex justify-between'>\n            <button onClick={() => { postTask({ task: \"openall\" }) }}>Open Inventory</button>\n            <button onClick={() => { postTask({ task: \"pickall\" }) }}>Pick Items</button>\n          </div>\n\n          <div className=\"container mt-1\">\n            <strong>Drop coords</strong>\n            x<input onBlur={inputHandler} id=\"dropx\" defaultValue={coords[0]} type={hideCoords ? \"password\" : \"number\"}></input>\n            y<input onBlur={inputHandler} id=\"dropy\" defaultValue={coords[1]} type={hideCoords ? \"password\" : \"number\"}></input>\n            z<input onBlur={inputHandler} id=\"dropz\" defaultValue={coords[2]} type={hideCoords ? \"password\" : \"number\"}></input>\n            <div className=\"flex items-center\">\n              <input className=\"showpass\" type=\"checkbox\" onClick={() => { setHide(!hideCoords) }}></input><small className=\"ml-1\">Hide coords</small>\n            </div>\n            <button className='mt-2' onClick={() => { postTask({ task: \"dropall\", coords: { x: coords[0], y: coords[1], z: coords[2] } }) }}>Drop Items</button>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <h1><strong>Bots settings</strong></h1>\n          <input id=\"bot1user\" type=\"text\" placeholder=\"username\"></input>\n          <input className=\"mt-1\" id=\"bot1pass\" type={showPass ? 'text' : 'password'} placeholder=\"password\"></input>\n          <div className=\"flex items-center\">\n            <input className=\"showpass\" type=\"checkbox\" onClick={() => { setShow(!showPass) }}></input><small className=\"ml-1\">Show password</small>\n          </div>\n          <div className=\"mt-0.5 mb-4\">\n            <button className=\"min-w-full\" onClick={startBot}>Start</button>\n          </div>\n          <strong>Previous bots</strong>\n          {recentBots.slice(0, 5).map(b => <button key={b.username} onClick={() => { setLogin(b.username, b.password) }} className=\"flex items-center mt-1\"><img className=\"w-4 h-4 mr-2\" src={\"https://minotar.net/avatar/\" + b.username}></img><p>{b.username}</p></button>)}\n        </div>\n\n        <div className=\"container\">\n          <h1><strong>Bots ({bots.length})</strong></h1>\n          {bots.map(bot => <div key={bot} className=\"flex gap-1 items-center m-0.5 px-1 justify-between\">\n            <div className=\"flex items-center\">\n              <img className=\"w-4 h-4 mr-2\" src={\"https://minotar.net/avatar/\" + bot}></img>\n              <strong>{bot}</strong>\n            </div>\n            <button onClick={() => { postTask({ task: \"stop\", username: bot }) }}>Stop</button>\n          </div>)}\n        </div>\n      </main>\n    </>\n  )\n}\n",{"ruleId":"17","severity":1,"message":"18","line":110,"column":157,"nodeType":"19","endLine":110,"endColumn":236},{"ruleId":"20","severity":1,"message":"21","line":110,"column":157,"nodeType":"19","endLine":110,"endColumn":236},{"ruleId":"17","severity":1,"message":"18","line":117,"column":15,"nodeType":"19","endLine":117,"endColumn":87},{"ruleId":"20","severity":1,"message":"21","line":117,"column":15,"nodeType":"19","endLine":117,"endColumn":87},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]